services:
  postgres:
    image: postgres:16.3
    container_name: postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 3s
      retries: 3

  pgadmin:
    image: dpage/pgadmin4:8.14
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_LISTEN_PORT: 80
    ports:
      - "${PGADMIN_PORT}:80"
    volumes:
      - pgadmin:/var/lib/pgadmin
    depends_on:
      postgres:
        condition: service_healthy

  minio:
    image: minio/minio:RELEASE.2025-01-20T14-49-07Z
    container_name: minio
    ports:
      - "${MINIO_HOST_PORT}:9000"
      - "${MINIO_WEB_PORT}:9001"
    volumes:
      - minio-storage:/data
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server --console-address ":9001" /data
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 5s
      timeout: 5s
      retries: 5

  mongodb:
    image: mongo:6-jammy
    ports:
      - "${MONGODB_PORT}:27017"
    volumes:
      - mongodb-data:/data/db
    environment:
      MONGO_INITDB_DATABASE: ${MONGODB_DB}
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_ROOT_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_ROOT_PASSWORD}
      MONGO_USERNAME: ${MONGODB_USER}
      MONGO_PASSWORD: ${MONGODB_PASSWORD}
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh mongodb:27017/${MONGODB_DB} --quiet
      interval: 10s
      timeout: 10s
      retries: 5
    command: >
      bash -c "
        echo 'db = db.getSiblingDB(\"${MONGODB_DB}\");
        db.createUser({
          user: \"${MONGODB_USER}\",
          pwd: \"${MONGODB_PASSWORD}\",
          roles: [{ role: \"readWrite\", db: \"${MONGODB_DB}\" }]
        });' > /docker-entrypoint-initdb.d/mongo-init.js &&
        docker-entrypoint.sh mongod
      "

  mongo-express: 
    image: mongo-express:1.0.2-20-alpine3.19
    ports: 
      - "${MONGOEXPRESS_PORT}:8081"
    environment:
      ME_CONFIG_MONGODB_URL: mongodb://${MONGODB_USER}:${MONGODB_PASSWORD}@mongodb:27017/${MONGODB_DB}?ssl=false
      ME_CONFIG_MONGODB_ENABLE_ADMIN: false
      ME_CONFIG_MONGODB_SERVER: "mongodb"
      ME_CONFIG_MONGODB_AUTH_DATABASE: ${MONGODB_DB}
      ME_CONFIG_MONGODB_AUTH_USERNAME: ${MONGODB_USER}
      ME_CONFIG_MONGODB_AUTH_PASSWORD: ${MONGODB_PASSWORD}
      ME_CONFIG_BASICAUTH_USERNAME: ${MONGODB_USER}
      ME_CONFIG_BASICAUTH_PASSWORD: ${MONGODB_PASSWORD}
    depends_on:
      mongodb:
        condition: service_healthy
    links:
      - "mongodb"

  backend:
    build: ./src/backend/
    container_name: backend
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    ports:
      - "${APPLICATION_PORT}:443"
    environment:
      Application__Database__ConnectionString: 'Host=postgres;Port=${POSTGRES_PORT};CommandTimeout=300;Database=${POSTGRES_DB};User Id=${POSTGRES_USER};Password=${POSTGRES_PASSWORD};'
      ASPNETCORE_URLS: 'https://+:443;http://+:8080'
      ASPNETCORE_Kestrel__Certificates__Default__Password: '${CERTIFICATE_PASSWORD}'
      ASPNETCORE_Kestrel__Certificates__Default__Path: '${CERTIFICATE_FILE}'
    volumes:
      - ./src/https:/https:ro

volumes:
  postgres-data:
  pgadmin:
  minio-storage:
  mongodb-data:  
