name: .NET CI

on:
  push:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 9.0.x
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --no-restore --configuration Release
      
    - name: Test
      run: dotnet test --no-build --configuration Release --verbosity normal

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install SSH key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        known_hosts: unnecessary
        if_key_exists: replace

    - name: Adding Known Hosts
      run: ssh-keyscan -H ${{ secrets.VM_HOST }} >> ~/.ssh/known_hosts

    - name: 'Update env file'
      run: echo HOSTNAME=${{ secrets.VM_HOST }} >> .env

    - name: Deploy to VM
      run: |
        # Deploy script
        ssh ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} "
          # Create directory if it doesn't exist
          mkdir -p ${{ secrets.VM_PATH }}

          # Go to project directory
          cd ${{ secrets.VM_PATH }}

          # Pull latest code (if git repo exists)
          if [ -d .git ]; then
            git pull
          else
            # First-time clone
            git clone https://github.com/${{ github.repository }} .
          fi

          # Copy over the .env file if it doesn't exist
          # This assumes you've already set up the .env file on the VM
          if [ ! -f .env ]; then
            echo 'Please set up your .env file manually on first deployment'
          fi

          # Ensure certificate directory exists
          mkdir -p src/https

          # Rebuild and restart containers
          docker compose down
          docker compose up --build -d
        "

  integration:
    needs: deploy
    runs-on: ubuntu-latest

    steps:
      - uses: gacts/install-hurl@v1
      - run: hurl --insecure --test ./src/test/login.hurl --variables-file ./src/test/.env.local --variable hostname=${{ secrets.VM_HOST }}
